
一、新建版本库/仓库repository
	创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
	$ mkdir learngit
	$ cd learngit
	$ pwd
	/Users/michael/learngit
	
	/*如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。*/
	
	第二步，通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/
	
	如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
	
二、把文件添加到版本库
	以本文"record.txt"为例如何将该文件添加到仓库里面？
	前提：一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
	第一步，用命令git add告诉Git，把文件添加到仓库：
	$ git add record.txt
	
	第二步，用命令git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a record file"
	[master (root-commit) ad45fa6] wrote a record file
	1 file changed, 28 insertions(+)
	create mode 100644 record.txt
	
	简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，
	这样你就能从历史记录里方便地找到改动记录。
	
	为什么Git添加文件需要add，commit一共两步呢？
	因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."

	小结(2016-12-26)：现在总结一下今天学的两点内容：
	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：
    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    第二步，使用命令git commit，完成。
	
三、如何查看文件的修改状态
	查看仓库当前的状态：git status
	$ git status
	On branch master
	Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)

        modified:   record.txt

	no changes added to commit (use "git add" and/or "git commit -a")
	
	/*上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。*/
	
	具体修改了什么内容?需要用git diff这个命令:
	$ git diff record.txt
	diff --git a/record.txt b/record.txt
	index d188e07..2685ccd 100644
	--- a/record.txt
	+++ b/record.txt
	@@ -1,3 +1,4 @@
	+
	 一、新建版本库/仓库repository
			创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
			$ mkdir learngit
	@@ -17,12 +18,30 @@
			以本文"record.txt"为例如何将该文件添加到仓库里面？
			前提：一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
			第一步，用命令git add告诉Git，把文件添加到仓库：
	-       $ git add readme.txt
	+       $ git add record.txt

			第二步，用命令git commit告诉Git，把文件提交到仓库：
	-       $ git commit -m "wrote a readme file"
	-       [master (root-commit) cb926e7] wrote a readme file
	-       1 file changed, 2 insertions(+)
	-       create mode 100644 readme.txt
	+       $ git commit -m "wrote a record file"
	+       [master (root-commit) ad45fa6] wrote a record file
	
	/*git diff顾名思义就是查看difference*/
	知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
	$ git add record.txt
	下一步，再次提交：
	$ git commit -m "wrote a record file"
	
	小结(2016-12-26):

    要随时掌握工作区的状态，使用git status命令。

    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

四、如何版本回退
	查看版本LOG日志：git log
	$ git log
	commit db6cb890440f07b89a99c39a3b390975a58f6eff
	Author: xyzh8298 <xyzh8298@163.com>
	Date:   Mon Dec 26 23:42:16 2016 +0800

		add some new contents

	commit ad45fa64906e6e6930327d0b283164f8d8a93320
	Author: xyzh8298 <xyzh8298@163.com>
	Date:   Mon Dec 26 18:41:53 2016 +0800

		wrote a record file

	/*commit为版本号，Author为用户，Date为时间。中间字串“add some new contents”为提交备注说明*/
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	$ git log --pretty=oneline
	db6cb890440f07b89a99c39a3b390975a58f6eff add some new contents
	ad45fa64906e6e6930327d0b283164f8d8a93320 wrote a record file

	1）回到历史版本	
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交db6cb890440f07b89a99c39a3b390975a58f6eff，
	上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	命令：git reset
	$git reset --hard HEAD^
	这就回到了上一个版本。
	
	2）旧版本回到新版本
	这就需要用到commit id了。
	命令：&git reset --hard db6cb8904
	/*commit id 号不用写全，它会找到唯一的ID*/
	如果不知道commit id号可以用命令git reflog来查看，
	命令：$git reflog
	$ git reflog
	db6cb89 HEAD@{0}: commit: add some new contents
	ad45fa6 HEAD@{1}: commit (initial): wrote a record file
	
	小结(2016-12-27)
    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

五、概念：工作区和暂存区
	Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。
	1）工作区（Working Directory）
	比如我的learngit文件夹就是一个工作区
	2）版本库（Repository）
	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
	还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	
	小结(2016-12-27):
	明白工作区与版本库之间的关联;
	通过命令$git add将文件存入暂存区stage,再通过命令$git commit一次性把暂存区的所有修改提交到分支。
	一旦提交后，如果你又没有对工作区做任何修改，暂存区就没有任何内容了,为空库。
	每次修改，如果不add到暂存区，那就不会加入到commit中。
	
六、撤销修改
	命令：$ git checkout -- file
	命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
	第一种情况：
		文件自修改后还没有被放到暂存区，一旦撤销修改就回到和版本库一模一样的状态了。
	第二种情况：
		文件已经添加到暂存区了，又作了修改，一旦撤销修改就回到添加到暂存区后的状态。
	总之：就是让这个文件回到最近一次git commit或git add时的状态。
	
	小结(2016-12-27):
	场景1：修改了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令：
		$ git checkout -- file
	场景2：修改了工作区某个文件的内容，并用命令$ git add file添加到了暂存区，这时想丢弃修改，需要分两步：
		一步：用命令$ git reset HEAD file，将add添加到暂存区的内容恢复掉上一次提交的版本。
		二步：用命令$ git checkout -- file,直接丢弃掉工作区的修改。
	场景3：已经用命令git commit提交了不合适的修改内容到版本库时，想要撤销本次提交，参考之前一节，主要命令：
		上一版本：$git reset --hard HEAD^
		新版本：&git reset --hard db6cb8904 /*commit id 号*/
	
七、删除文件
	两种情况：
		1种情况：只是删除工作区没有用到的文件，用命令: $ rm file; 或者直接把文件删除掉。
			这种情况，在版本库中还是有以前的版本记录。要是误删除的话，可以把文件恢复到最新版本，命令：
			$ git checkout -- file  
			/*git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。*/
		2种情况：确实要从版本库中删除该文件，需要三条命令：
			1）$ rm file
			2）$ git rm file
			3）$ git commit -m "xxxx"
			这样就彻底的从版本库中删除掉了。
	
	小结(2016-12-27)：
	提交代码的更改一共分两个阶段：
	1）从工作目录提交到stage
	2）从stage提交到master
	从工作目录提交到stage，需要用add或者rm命令，只提交到stage，而没有提交到master，是不会自动同步到master的。
	从stage提交到master用commit命令。
	退回也是要分两步，一个是从master退回到stage，然后再从stage退回到工作目录。
	对于还没有提交到stage的，可以从stage用checkout命令退回，这一步会取stage中的文件状态，覆盖掉工作目录中文件的状态，跟master完全没关系。
	对于已经到达stage的，想把state中的文件状态用master中的覆盖掉，就用reset命令，这样就把stage中修改用master的状态覆盖掉了，完全跟工作目录没关系
	
八、远程仓库
	利用GitHub网站提供Git仓库托管服务，就可以免费获得Git远程仓库。
	环境搭建步骤：
	第一步：注册一个GitHub账号
	第二步：设置SSH Key
		由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要对本地和GitHub进行设置。
		1）创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
		如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
		$ ssh-keygen -t rsa -C "youremail@example.com"
		/*需要把邮件地址换成自己的邮件地址*/
		然后一路回车使用默认值。
		安装完成之后，可以在用户主目录里找到.ssh目录，里面包括两个文件:id_rsa,id_rsa.pub。
		这两个就是SSH Key的密钥对，id_rsa是私钥，不能泄露出去;id_rsa_pub是公钥，可以放心地告诉任何人。
		
		2）登陆GitHub,打开“Account settings”,"SSH and GPG keys"页面
		网址：https://github.com/     https://github.com/settings/ssh
		在页面中点"Add SSH Key",填上任意title，在key文本框里粘贴id_rsa.pub文件的内容，最后"Add Key"添加完成。
	
	为什么GitHub需要SSH Key呢？
	因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，
	所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
	
	GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
	只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
	
	友情提示:在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
	
	怎样才能不让别人看到Git仓库呢？
	有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。
	另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的
	
	小结(2016-12-27):
		怎样搭建本地git仓库与GitHub仓库环境？
		注册账号设置SSH Key,命令：$ ssh-keygen -t rsa -C "youremail@example.com"
		将id_rsa_pub的内容添加到GitHub的settings中。
	
九、远程仓库--添加远程库
	情景：已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，
		这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
	操作：首先，登陆GitHub，然后，在右上角找到"Create a new repository"按钮，创建一个新的仓库.
	
	
	