
一、新建版本库/仓库repository
	创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
	$ mkdir learngit
	$ cd learngit
	$ pwd
	/Users/michael/learngit
	
	/*如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。*/
	
	第二步，通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/
	
	如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
	
二、把文件添加到版本库
	以本文"record.txt"为例如何将该文件添加到仓库里面？
	前提：一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
	第一步，用命令git add告诉Git，把文件添加到仓库：
	$ git add record.txt
	
	第二步，用命令git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a record file"
	[master (root-commit) ad45fa6] wrote a record file
	1 file changed, 28 insertions(+)
	create mode 100644 record.txt
	
	简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，
	这样你就能从历史记录里方便地找到改动记录。
	
	为什么Git添加文件需要add，commit一共两步呢？
	因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."

	小结(2016-12-26)：现在总结一下今天学的两点内容：
	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	第二步，使用命令git commit，完成。
	
三、如何查看文件的修改状态
	查看仓库当前的状态：git status
	$ git status
	On branch master
	Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)

        modified:   record.txt

	no changes added to commit (use "git add" and/or "git commit -a")
	
	/*上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。*/
	
	具体修改了什么内容?需要用git diff这个命令:
	$ git diff record.txt
	diff --git a/record.txt b/record.txt
	index d188e07..2685ccd 100644
	--- a/record.txt
	+++ b/record.txt
	@@ -1,3 +1,4 @@
	+
	 一、新建版本库/仓库repository
			创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
			$ mkdir learngit
	@@ -17,12 +18,30 @@
			以本文"record.txt"为例如何将该文件添加到仓库里面？
			前提：一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
			第一步，用命令git add告诉Git，把文件添加到仓库：
	-       $ git add readme.txt
	+       $ git add record.txt

			第二步，用命令git commit告诉Git，把文件提交到仓库：
	-       $ git commit -m "wrote a readme file"
	-       [master (root-commit) cb926e7] wrote a readme file
	-       1 file changed, 2 insertions(+)
	-       create mode 100644 readme.txt
	+       $ git commit -m "wrote a record file"
	+       [master (root-commit) ad45fa6] wrote a record file
	
	/*git diff顾名思义就是查看difference*/
	知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
	$ git add record.txt
	下一步，再次提交：
	$ git commit -m "wrote a record file"
	
	小结(2016-12-26):
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

四、如何版本回退
	查看版本LOG日志：git log
	$ git log
	commit db6cb890440f07b89a99c39a3b390975a58f6eff
	Author: xyzh8298 <xyzh8298@163.com>
	Date:   Mon Dec 26 23:42:16 2016 +0800

		add some new contents

	commit ad45fa64906e6e6930327d0b283164f8d8a93320
	Author: xyzh8298 <xyzh8298@163.com>
	Date:   Mon Dec 26 18:41:53 2016 +0800

		wrote a record file

	/*commit为版本号，Author为用户，Date为时间。中间字串“add some new contents”为提交备注说明*/
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	$ git log --pretty=oneline
	db6cb890440f07b89a99c39a3b390975a58f6eff add some new contents
	ad45fa64906e6e6930327d0b283164f8d8a93320 wrote a record file

	1）回到历史版本	
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交db6cb890440f07b89a99c39a3b390975a58f6eff，
	上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	命令：git reset
	$git reset --hard HEAD^
	这就回到了上一个版本。
	
	2）旧版本回到新版本
	这就需要用到commit id了。
	命令：&git reset --hard db6cb8904
	/*commit id 号不用写全，它会找到唯一的ID*/
	如果不知道commit id号可以用命令git reflog来查看，
	命令：$git reflog
	$ git reflog
	db6cb89 HEAD@{0}: commit: add some new contents
	ad45fa6 HEAD@{1}: commit (initial): wrote a record file
	
	小结(2016-12-27)
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

五、概念：工作区和暂存区
	Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。
	1）工作区（Working Directory）
	比如我的learngit文件夹就是一个工作区
	2）版本库（Repository）
	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
	还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	
	小结(2016-12-27):
	明白工作区与版本库之间的关联;
	通过命令$git add将文件存入暂存区stage,再通过命令$git commit一次性把暂存区的所有修改提交到分支。
	一旦提交后，如果你又没有对工作区做任何修改，暂存区就没有任何内容了,为空库。
	每次修改，如果不add到暂存区，那就不会加入到commit中。
	
六、撤销修改
	命令：$ git checkout -- file
	命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
	第一种情况：
		文件自修改后还没有被放到暂存区，一旦撤销修改就回到和版本库一模一样的状态了。
	第二种情况：
		文件已经添加到暂存区了，又作了修改，一旦撤销修改就回到添加到暂存区后的状态。
	总之：就是让这个文件回到最近一次git commit或git add时的状态。
	
	小结(2016-12-27):
	场景1：修改了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令：
		$ git checkout -- file
	场景2：修改了工作区某个文件的内容，并用命令$ git add file添加到了暂存区，这时想丢弃修改，需要分两步：
		一步：用命令$ git reset HEAD file，将add添加到暂存区的内容恢复掉上一次提交的版本。
		二步：用命令$ git checkout -- file,直接丢弃掉工作区的修改。
	场景3：已经用命令git commit提交了不合适的修改内容到版本库时，想要撤销本次提交，参考之前一节，主要命令：
		上一版本：$git reset --hard HEAD^
		新版本：&git reset --hard db6cb8904 /*commit id 号*/
	
七、删除文件
	两种情况：
		1种情况：只是删除工作区没有用到的文件，用命令: $ rm file; 或者直接把文件删除掉。
			这种情况，在版本库中还是有以前的版本记录。要是误删除的话，可以把文件恢复到最新版本，命令：
			$ git checkout -- file  
			/*git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。*/
		2种情况：确实要从版本库中删除该文件，需要三条命令：
			1）$ rm file
			2）$ git rm file
			3）$ git commit -m "xxxx"
			这样就彻底的从版本库中删除掉了。
	
	小结(2016-12-27)：
	提交代码的更改一共分两个阶段：
	1）从工作目录提交到stage
	2）从stage提交到master
	从工作目录提交到stage，需要用add或者rm命令，只提交到stage，而没有提交到master，是不会自动同步到master的。
	从stage提交到master用commit命令。
	退回也是要分两步，一个是从master退回到stage，然后再从stage退回到工作目录。
	对于还没有提交到stage的，可以从stage用checkout命令退回，这一步会取stage中的文件状态，覆盖掉工作目录中文件的状态，跟master完全没关系。
	对于已经到达stage的，想把state中的文件状态用master中的覆盖掉，就用reset命令，这样就把stage中修改用master的状态覆盖掉了，完全跟工作目录没关系
	
八、远程仓库
	利用GitHub网站提供Git仓库托管服务，就可以免费获得Git远程仓库。
	环境搭建步骤：
	第一步：注册一个GitHub账号
	第二步：设置SSH Key
		由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要对本地和GitHub进行设置。
		1）创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
		如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
		$ ssh-keygen -t rsa -C "youremail@example.com"
		/*需要把邮件地址换成自己的邮件地址*/
		然后一路回车使用默认值。
		安装完成之后，可以在用户主目录里找到.ssh目录，里面包括两个文件:id_rsa,id_rsa.pub。
		这两个就是SSH Key的密钥对，id_rsa是私钥，不能泄露出去;id_rsa_pub是公钥，可以放心地告诉任何人。
		
		2）登陆GitHub,打开“Account settings”,"SSH and GPG keys"页面
		网址：https://github.com/     https://github.com/settings/ssh
		在页面中点"Add SSH Key",填上任意title，在key文本框里粘贴id_rsa.pub文件的内容，最后"Add Key"添加完成。
	
	为什么GitHub需要SSH Key呢？
	因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，
	所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
	
	GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
	只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
	
	友情提示:在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
	
	怎样才能不让别人看到Git仓库呢？
	有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。
	另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的
	
	小结(2016-12-27):
	怎样搭建本地git仓库与GitHub仓库环境？
	注册账号设置SSH Key,命令：$ ssh-keygen -t rsa -C "youremail@example.com"
	将id_rsa_pub的内容添加到GitHub的settings中。
	
九、远程仓库--添加远程库
	场景：已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，
		这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
	操作步骤：
	首先，登陆GitHub，然后，在右上角找到"Create a new repository"按钮，创建一个新的仓库.
	在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库.
	目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，
	也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
	
	然后，根据GitHub的提示，在本地的learngit仓库下运行命令：
	$ git remote add origin git@github.com:xyzh8298/learngit.git
	命令解析：xyzh8298为GitHub账户名，origin是远程库的名字，这是Git默认的叫法，可改成别的，但是origin这个名字一看就知道是远程库。
	
	接着，把本地库的所有内容推送到远程库上，命令：
	$ git push -u origin master
	命令解析：git push命令实际上是把当前分支master推送到远程。
	由于远程库是空的，第一次推送master分支时，加上了-u参数，此参数使得本地与远程关联起来了，以后推送或者拉取时就可以简化命令。
	
	这样就达到了真正的分布式版本库的要求了。
	
	SSH警告：当第一次使用clone或者push命令连接GitHub时，会得到一个警告：
	Are you sure you want to continue connecting (yes/no)?
	在这里直接输入yes即可，因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器。
	
	小结(2016-12-27)：
	1）关联一个远程库，命令：git remote add origin git@server-name:path/repo-name.git；
	2）关联后第一次推送master分支的命令：git push -u origin master,之后就可以将参数-u去掉来推送了。
	好处：分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，
	而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

十、远程仓库--从远程库克隆
	场景：假设从零开发，最好的方式是创建远程库，然后，从远程库克隆。
	操作步骤：
	首先，登陆GitHub,创建一个新的仓库，名字叫gitskills:
	同时勾选Initialize this repository with a README，
	这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件.
	
	现在，远程库已经准备好了，下一步在本地用命令:git clone克隆一个本地库:
	$ git clone git@github.com:xyzh8298/gitskills.git
	完成克隆后，进入gitskills目录看看，已经有README.md文件了。
	
	如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
	
	小结(2016-12-27)：
	1）要远程克隆一个仓库，首先知道仓库的地址，然后用命令：git clone
	2）Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	用https://github.com/michaelliao/gitskills.git这样的地址。
	实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
	但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

十一、分支管理--创建与合并分支
	分支在实际中有什么用呢？
	假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，
	如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。
	如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
	现在有了分支，就不用怕了。
	你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，
	直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
	
	原理解释：
	截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
	HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
	
	场景：
	当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。
	从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
	假如我们在dev上的工作完成了，就可以把dev合并到master上。
	Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。
	所以Git合并分支也很快！就改改指针，工作区内容也不变！
	合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支。
	
	实战：
	首先，我们创建dev分支，然后切换到dev分支：
	$ git checkout -b dev
	Switched to a new branch 'dev'
	/*git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：*/
	$ git branch dev
	$ git checkout dev
	Switched to branch 'dev'
	
	然后，用git branch命令查看当前分支：
	$ git branch
	* dev
	  master
	/*git branch命令会列出所有分支，当前分支前面会标一个*号。*/
	
	然后，我们就可以在dev分支上正常提交，比如对test.txt做个修改，加上一行：
	Creating a new branch is puick.
	
	然后提交：
	$ git add test.txt 
	$ git commit -m "branch test"
	[dev fec145a] branch test
	 1 file changed, 1 insertion(+)
		
	现在，dev分支的工作完成，我们就可以切换回master分支：
	$ git checkout master
	Switched to branch 'master'
	切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！
	因为那个提交是在dev分支上，而master分支此刻的提交点并没有变.
	
	现在，我们把dev分支的工作成果合并到master分支上：
	$ git merge dev
	Updating d17efd8..fec145a
	Fast-forward
	 readme.txt |    1 +
	 1 file changed, 1 insertion(+)
	git merge命令用于合并指定分支到当前分支。
	合并后，再查看test.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。	
	注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，
	也就是直接把master指向dev的当前提交，所以合并速度非常快。
	
	合并完成后，就可以放心地删除dev分支了：
	$ git branch -d dev
	Deleted branch dev (was fec145a).
	
	删除后，查看branch，就只剩下master分支了：
	$ git branch
	* master
	
	因为创建、合并和删除分支非常快，
	所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
	
	小结(2016-12-28)：
	Git 鼓励大家大量使用分支。
	命令集：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	
十二、分支管理--解决冲突
	场景：当创建一个分支时，并对某一个文件内容进行了修改；然后在master分支中也对此文件的同一内容做了修改。
	master分支与新创建的分支分别提交，这时文件存在冲突，需要手动解决冲突。
	
	查看冲突文件：git status
	查看分支合并情况：git log --graph   如：$ git log --graph --pretty=oneline --abbrev-commit
	
十三、分支管理--分支管理策略
	之前介绍了用Fast forward模式合并分支。现在实战一下:--no-ff方式的git merge。
	
	首先我，创建并切换dev分支，修改test.txt文件内容并提交新的commit:
	$ git checkout -b dev
	$ git add test.txt
	$ git commit -m "add merge"

	然后，切换回到master:
	$ git checkout master

	然后，准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
	$ git merge --no-ff -m "merge with no-ff" dev
	/*因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述"merge with no-ff"写进去。*/

	最后，合并后，用git log查看分支历史：
	$ git log --graph --pretty=oneline --abbrev-commit

	小结(2016-12-28)：
	在实际开发中，应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，
	再把dev分支合并到master上，在master分支发布1.0版本；

	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
	而fast forward合并就看不出来曾经做过合并。

十四、分支管理--Bug分支
	软件开发中，bug就像家常便饭一样。
	有了bug就需要修复，在Git中，由于分支是如此的强大，
	所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
	
	场景：
	当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
	但是，等等，当前正在dev上进行的工作还没有提交。
	并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。
	但是，必须在两个小时内修复该bug，怎么办？
	
	操作步骤：
	这就需要用到Git提供的stash功能。它可以把当前工作现场“储藏”起来，等以后恢复现场后再继续工作。
	命令：$ git stash
	
	首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就在master创建临时分支：
	命令：
	$ git checkout master
	$ git checkout -b hew3shz_issue-001
	
	假设修改内容增加一句话：Git is a free software ... 在test.txt
	命令：
	$ git add readme.txt
	$ git commit -m "fix bug 001"
	
	修复完成后，切换到master分支，并完成合并，最后删除hew3shz_issue-001分支：
	$ git checkout master
	$ git merge --no-ff -m "merged bug fix 101" hew3shz_issue-001
	$ git branch -d hew3shz_issue-001
	
	bug完成后，这时需要回到dev分支继续干活了：
	命令：
	$ git checkout dev
	
	$ git status   /*查看一下工作状态*/
	工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
	$ git stash list
	
	可以看出来工作现场还在，Git把stash内容存在某个地方了，但是需要恢复。
	方法有两个：
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	另一种方式是用git stash pop，恢复的同时把stash内容也删了。
	命令：
	$ git stash apply
	$ git stash drop
	
	$ git stash pop
	
	小结(2016-12-28)：
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	
十五、分支管理--Feature分支
	场景：
	软件开发中，总有无穷无尽的新的功能要不断添加进来。
	添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，
	所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
	
	假设，你终于接到了一个新任务：开发代号为Vulcan的新功能,于是准备开发：
	$ git checkout -b feature-vulcan
	于是，5分钟后，开发完毕：
	$ git add vulcan.py
	$ git commit -m "add feature vulcan"
	切回dev,准备合并：
	$ git checkout dev
	一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。
	但是，就在此时，接到上级命令，因经费不足，新功能必须取消！
	虽然白干了，但是这个分支还是必须就地销毁：
	$ git branch -d feature-vulcan
	销毁失败。Git友情提醒:feature-vulcan分支还没有被合并，
	如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。
	现在我们强行删除：
	$ git branch -D feature-vulcan
	终于删除成功！
	
	小结(2016-12-29)：
	开发一个新feature，最好新建一个分支；
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	
十六、分支管理--多人协作
	当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，
	并且，远程仓库的默认名称是origin。
	查看远程库的信息，用git remote：
	$ git remote
	$ git remote -v
	
	推送分支:就是把该分支上的所有本地提交推送到远程库。
	推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上.
	$ git push origin master
	如果要推送其他分支，比如dev，就改成：
	$ git push origin dev
	
	哪些分支需要推送，哪些不需要呢？
	1)master分支是主分支，因此要时刻与远程同步；
	2)dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	3)bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	4)feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
	
	抓取分支:
	场景：
	多人协作时，大家都会往master和dev分支上推送各自的修改。
	现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：
	$ git clone git@github.com:xyzh8298/learngit.git
	当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：
	$ git branch
	现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
	$ git checkout -b my_dev origin/dev
	现在，他就可以在my_dev上继续修改，然后，时不时地把my_dev分支push到远程：
	$ git commit -m "add /usr/bin/env"
	$ git push origin my_dev
	你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
	$ git add hello.py
	$ git commit -m "add coding: utf-8"
	$ git push origin dev
	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，
	解决办法也很简单，Git已经提示我们，
	先用git pull把最新的提交从origin/dev抓下来，
	然后，在本地合并，解决冲突，再推送：
	$ git pull
	git pull也失败了，原因是没有指定本地my_dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
	$ git branch --set-upstream my_dev origin/dev
	Branch my_dev set up to track remote branch dev from origin.
	再pull：
	$ git pull
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
	$ git commit -m "merge & fix hello.py"
	$ git push origin my_dev
	
	多人协作的工作模式通常是这样：
	1)首先，可以试图用git push origin branch-name推送自己的修改；
	2)如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	3)如果合并有冲突，则解决冲突，并在本地提交；
	4)没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream branch-name origin/branch-name。
	
	小结(2016-12-29)：
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

	
	
	
	
	
	
	